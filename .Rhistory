q()
setwd("~/Documents/code/r/project")
setwd("~/Documents/netsec")
setwd("~/Documents/code/r/project/regex")
library(tidyverse)
log <- read_log("log/20210903_access.log")
View(log)
?webreadr
??webreadr
setwd("~/Documents/netsec/irtool")
regex_parse <- function(log_df, log_col){
# set log column names
nm <- c("remote_ip",    # 1
"log_nm",       # 2
"remote_usr",   # 3
"dttm",         # 4
"request",      # 5
"status",       # 6
"bytes_sent",   # 7
"referer",      # 8
"ua_string")    # 9
# set regex for each column
re <- str_c("(\\S+)\\s+",                 # 1 remote_ip
"(\\S+)\\s+",                 # 2 log_nm
"(\\S+)\\s+",                 # 3 remote_usr
"(\\[[^\\[\\]]+\\])\\s+",     # 4 dttm
"(\"[^\"]*\")\\s+",           # 5 request
"(\\d+)\\s+",                 # 6 status
"(\\d+)\\s+",                 # 7 bytes_sent
"(\"[^\"]+\")\\s+",           # 8 referer
"(\"[^\"]+\")")               # 9 ua_string
log_df_out <- extract(log_df, log_col, nm, re)
rm(nm, re)
log_df_out
}
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, value)
}
apache_log_parse("20210903_access.log")
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- dplyr::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, value)
}
apache_log_parse("20210903_access.log")
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, value)
}
apache_log_parse("20210903_access.log")
regex_parse <- function(log_df, log_col){
# set log column names
nm <- c("remote_ip",    # 1
"log_nm",       # 2
"remote_usr",   # 3
"dttm",         # 4
"request",      # 5
"status",       # 6
"bytes_sent",   # 7
"referer",      # 8
"ua_string")    # 9
# set regex for each column
re <- readr::str_c("(\\S+)\\s+",                 # 1 remote_ip
"(\\S+)\\s+",                 # 2 log_nm
"(\\S+)\\s+",                 # 3 remote_usr
"(\\[[^\\[\\]]+\\])\\s+",     # 4 dttm
"(\"[^\"]*\")\\s+",           # 5 request
"(\\d+)\\s+",                 # 6 status
"(\\d+)\\s+",                 # 7 bytes_sent
"(\"[^\"]+\")\\s+",           # 8 referer
"(\"[^\"]+\")")               # 9 ua_string
log_df_out <- readr::extract(log_df, log_col, nm, re)
rm(nm, re)
log_df_out
}
apache_log_parse("20210903_access.log")
regex_parse <- function(log_df, log_col){
# set log column names
nm <- c("remote_ip",    # 1
"log_nm",       # 2
"remote_usr",   # 3
"dttm",         # 4
"request",      # 5
"status",       # 6
"bytes_sent",   # 7
"referer",      # 8
"ua_string")    # 9
# set regex for each column
re <- stringr::str_c("(\\S+)\\s+",                 # 1 remote_ip
"(\\S+)\\s+",                 # 2 log_nm
"(\\S+)\\s+",                 # 3 remote_usr
"(\\[[^\\[\\]]+\\])\\s+",     # 4 dttm
"(\"[^\"]*\")\\s+",           # 5 request
"(\\d+)\\s+",                 # 6 status
"(\\d+)\\s+",                 # 7 bytes_sent
"(\"[^\"]+\")\\s+",           # 8 referer
"(\"[^\"]+\")")               # 9 ua_string
log_df_out <- readr::extract(log_df, log_col, nm, re)
rm(nm, re)
log_df_out
}
apache_log_parse("20210903_access.log")
?extractAIC
?extract
regex_parse <- function(log_df, log_col){
# set log column names
nm <- c("remote_ip",    # 1
"log_nm",       # 2
"remote_usr",   # 3
"dttm",         # 4
"request",      # 5
"status",       # 6
"bytes_sent",   # 7
"referer",      # 8
"ua_string")    # 9
# set regex for each column
re <- stringr::str_c("(\\S+)\\s+",                 # 1 remote_ip
"(\\S+)\\s+",                 # 2 log_nm
"(\\S+)\\s+",                 # 3 remote_usr
"(\\[[^\\[\\]]+\\])\\s+",     # 4 dttm
"(\"[^\"]*\")\\s+",           # 5 request
"(\\d+)\\s+",                 # 6 status
"(\\d+)\\s+",                 # 7 bytes_sent
"(\"[^\"]+\")\\s+",           # 8 referer
"(\"[^\"]+\")")               # 9 ua_string
log_df_out <- magrittr::extract(log_df, log_col, nm, re)
rm(nm, re)
log_df_out
}
apache_log_parse("20210903_access.log")
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, log_df$value)
}
apache_log_parse("20210903_access.log")
log_file <- "20210903_access.log"
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
View(log_df)
# set log column names
nm <- c("remote_ip",    # 1
"log_nm",       # 2
"remote_usr",   # 3
"dttm",         # 4
"request",      # 5
"status",       # 6
"bytes_sent",   # 7
"referer",      # 8
"ua_string")    # 9
# set regex for each column
re <- stringr::str_c("(\\S+)\\s+",                 # 1 remote_ip
"(\\S+)\\s+",                 # 2 log_nm
"(\\S+)\\s+",                 # 3 remote_usr
"(\\[[^\\[\\]]+\\])\\s+",     # 4 dttm
"(\"[^\"]*\")\\s+",           # 5 request
"(\\d+)\\s+",                 # 6 status
"(\\d+)\\s+",                 # 7 bytes_sent
"(\"[^\"]+\")\\s+",           # 8 referer
"(\"[^\"]+\")")               # 9 ua_string
log_col <- log_df$value
log_df_out <- magrittr::extract(log_df, log_col, nm, re)
View(log_df)
log_df_out <- tidyr::extract(log_df, log_col, nm, re)
log_col <- value
log_col <- 'value'
log_df_out <- tidyr::extract(log_df, log_col, nm, re)
View(log_df_out)
regex_parse <- function(log_df, log_col){
# set log column names
nm <- c("remote_ip",    # 1
"log_nm",       # 2
"remote_usr",   # 3
"dttm",         # 4
"request",      # 5
"status",       # 6
"bytes_sent",   # 7
"referer",      # 8
"ua_string")    # 9
# set regex for each column
re <- stringr::str_c("(\\S+)\\s+",                 # 1 remote_ip
"(\\S+)\\s+",                 # 2 log_nm
"(\\S+)\\s+",                 # 3 remote_usr
"(\\[[^\\[\\]]+\\])\\s+",     # 4 dttm
"(\"[^\"]*\")\\s+",           # 5 request
"(\\d+)\\s+",                 # 6 status
"(\\d+)\\s+",                 # 7 bytes_sent
"(\"[^\"]+\")\\s+",           # 8 referer
"(\"[^\"]+\")")               # 9 ua_string
log_df_out <- tidyr::extract(log_df, log_col, nm, re)
rm(nm, re)
log_df_out
}
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, log_df$value)
}
apache_log_parse("20210903_access.log")
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, value)
}
apache_log_parse("20210903_access.log")
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, "value")
}
apache_log_parse("20210903_access.log")
df <- apache_log_parse("20210903_access.log")
View(df)
apache_log_parse <- function(log_file){
log_ch_str <- readLines(log_file)
log_df <- tibble::enframe(log_ch_str)
log_df <- log_df[,-1]
log_df <- regex_parse(log_df, "value")
return(log_df)
}
df <- apache_log_parse("20210903_access.log")
View(df)
install.packages("roxygen2")
library(irtool)
library(irtool)
library(irtool)
library(irtool)
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages(c("backports", "BH", "blob", "brio", "broom", "callr", "cli", "colorspace", "cpp11", "crayon", "curl", "DBI", "dbplyr", "desc", "diffobj", "dplyr", "ellipsis", "fansi", "farver", "forcats", "fs", "generics", "ggplot2", "haven", "hms", "httpuv", "isoband", "later", "lifecycle", "lubridate", "nycflights13", "openssl", "pillar", "pkgbuild", "pkgload", "plumber", "processx", "promises", "ps", "R6", "rappdirs", "Rcpp", "readr", "reprex", "reticulate", "rvest", "sodium", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "utf8", "vctrs", "viridisLite", "waldo", "withr", "writexl", "xml2"))
install.packages(c("backports", "BH", "blob", "brio", "broom", "callr", "cli", "colorspace", "cpp11", "crayon", "curl", "DBI", "dbplyr", "desc", "diffobj", "dplyr", "ellipsis", "fansi", "farver", "forcats", "fs", "generics", "ggplot2", "haven", "hms", "httpuv", "isoband", "later", "lifecycle", "lubridate", "nycflights13", "openssl", "pillar", "pkgbuild", "pkgload", "plumber", "processx", "promises", "ps", "R6", "rappdirs", "Rcpp", "readr", "reprex", "reticulate", "rvest", "sodium", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "utf8", "vctrs", "viridisLite", "waldo", "withr", "writexl", "xml2"))
install.packages(c("backports", "BH", "blob", "brio", "broom", "callr", "cli", "colorspace", "cpp11", "crayon", "curl", "DBI", "dbplyr", "desc", "diffobj", "dplyr", "ellipsis", "fansi", "farver", "forcats", "fs", "generics", "ggplot2", "haven", "hms", "httpuv", "isoband", "later", "lifecycle", "lubridate", "nycflights13", "openssl", "pillar", "pkgbuild", "pkgload", "plumber", "processx", "promises", "ps", "R6", "rappdirs", "Rcpp", "readr", "reprex", "reticulate", "rvest", "sodium", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "utf8", "vctrs", "viridisLite", "waldo", "withr", "writexl", "xml2"))
library(irtool)
q()
library(irtool)
install.packages("testthat")
library(irtool)
df <- apache_log_parse("20210903_access.log")
View(df)
library(irtool)
df <- apache_log_parse("20210903_access.log")
library(irtool)
df <- apache_log_parse("20210903_access.log")
library(irtool)
df <- apache_log_parse("20210903_access.log")
library(irtool)
df <- apache_log_parse("20210903_access.log")
View(df)
str(df)
